<?php

/**
 * @file
 * Adds fields integration with FlexSlider
 *
 * @author jepedo
 * @author Mathew Winstone <mwinstone@coldfrontlabs.ca>
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Adds the flexslider format option within the manage display form of
 * of an image field.
 */
function flexslider_fields_field_formatter_info() {
  return array(
    'flexslider' => array(
      'label' => t('Flexslider'),
      'field types' => array('image', 'media', 'field_collection'),
      'settings' => array(
        'optionset' => 'default',
        'image_style' => '',
        'caption' => FALSE,
        'flexslider_link' => '',
        'flexslider_caption' => '',
        'flexslider_caption_link' => '',
        'flexslider_field_collection_image' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings form within the manage display page of
 * an image field with formatter flexslider.
 */
function flexslider_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  // Show select box for the option set
  $optionsets = array();
  ctools_include('export');
  foreach (flexslider_optionset_load_all() as $name => $optionset) {
    $optionsets[$name] = check_plain($optionset->title);
  }

  $form['optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset'],
  );

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $form['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
  );

  if ($field['type'] == 'field_collection') {
    $form['flexslider_field_collection_image'] = array(
      '#title'          => t('Image field'),
      '#type'           => 'select',
      '#default_value'  => $settings['flexslider_field_collection_image'],
      '#empty_option'   => t('None'),
      '#options'        => _flexslider_fields_get_fields(array('image', 'imagefield_crop'), $field['type'], $field['field_name']),
      '#required'       => TRUE,
    );
  }

  $links = array(
    'content' => t('Content'),
    'file'    => t('File'),
  );
  if ($field['type'] == 'media' || $field['type'] == 'field_collection')
    $links += _flexslider_fields_get_fields(array('link_field', 'node_reference'), $field['type'], $field['field_name']);
  $form['flexslider_link'] = array(
    '#title'          => t('Link image to'),
    '#type'           => 'select',
    '#default_value'  => $settings['flexslider_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => $links,
  );

  if ($field['type'] == 'media' || $field['type'] == 'field_collection')
    $captions = _flexslider_fields_get_fields(array('text'), $field['type'], $field['field_name']);
  else {
    $captions = array(
      'link_both' => t('Title and Alt text (linkable)'),
      'title'   => t('Title text only'),
      'alt'     => t('Alt text only'),
    );
  }
  $form['flexslider_caption'] = array(
    '#title'          => t('Caption'),
    '#type'           => 'select',
    '#default_value'  => $settings['flexslider_caption'],
    '#empty_option'   => t('Title and Alt text'),
    '#options'        => $captions,
  );

  $form['flexslider_caption_link'] = array(
    '#title'          => t('Link caption to'),
    '#type'           => 'select',
    '#default_value'  => $settings['flexslider_caption_link'],
    '#empty_option'   => t('Nothing'),
    '#options'        => $links,
    '#states' => array(
      'invisible' => array(
        ':input[name$="[settings_edit_form][settings][flexslider_caption]"]' => array('value' => ''),
      ),
    ),
  );

  // If the image field doesn't have the Title field enabled, tell the user.
  if ($instance['settings']['title_field'] == FALSE) {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#disabled' => TRUE,
      '#description' => t('You need to <a href="@url">enable the Title field</a> for this image field to be able use it as a caption.', array('@url' => url('admin/structure/types/manage/' . $instance['bundle'] . '/fields/' . $instance['field_name'], array('fragment' => 'edit-instance-settings-title-field', 'query' => array('destination' => 'admin/structure/types/manage/' . $instance['bundle'] . '/display'))))),
    );
  }
  else {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#default_value' => $settings['caption'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of a flexslider formatted image field
 */
function flexslider_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load option set
  ctools_include('export');
  if (!empty($settings['optionset'])) {
    $o = flexslider_optionset_load($settings['optionset']);
    if ($o !== NULL) {
      $optionset = $o;
    }
  }

  // Display the selected image style
  if (!empty($settings['image_style'])) {
    $is = t('Image style: %imagestyle', array('%imagestyle' => $settings['image_style']));
  }
  else {
    $is = t('Image style: None (original image)');
  }

  // Build settings summary
  $optionset = isset($optionset) ? $optionset->title : t('Default settings');
  $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));
  $summary[] = $is;

  $link_types = array(
    'content'   => t('content'),
    'file'      => t('file'),
    'colorbox'  => t('Colorbox'),
  );
  if ($field['type'] == 'media' || $field['type'] == 'field_collection')
    $link_types += _flexslider_fields_get_fields(array('link_field', 'node_reference'), $field['type'], $field['field_name']);

  if (isset($link_types[$settings['flexslider_link']])) {
    $link_type_message = t('Link to: @link', array('@link' => $link_types[$settings['flexslider_link']]));
    $summary[] = $link_type_message;
  }

  if ($field['type'] == 'media' || $field['type'] == 'field_collection')
    $caption_types = _flexslider_fields_get_fields(array('text'), $field['type'], $field['field_name']);
  else $caption_types = array(
    'link_both' => t('Title and Alt text (linkable)'),
    'title' => t('Title text'),
    'alt'   => t('Alt text'),
  );
  // Display this setting only if there's a caption.
  if(!isset($caption_types[$settings['flexslider_caption']]))
    $caption_types[$settings['flexslider_caption']] = 'Title and Alt text';
  $caption_message = t('Caption: @caption', array('@caption' => $caption_types[$settings['flexslider_caption']]));
  if (isset($link_types[$settings['flexslider_caption_link']])) $caption_message .= ' (' . t('Link to: @link', array('@link' => $link_types[$settings['flexslider_caption_link']])) . ')';
  $summary[] = $caption_message;

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Prepares a renderable array of images and adds the neccessary JS and CSS
 */
function flexslider_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  $element = array();
  if (count($items) > 0) {

    foreach ($items as $key => $item) {
      $tmp = $item;
      $item = array();
      $item['item'] = $tmp;

      // Setup the variables for calling theme_image_style
      $item['slide']['path'] = $item['item']['uri'];
      $item['slide']['style_name'] = $display['settings']['image_style'];
      $item['slide']['width'] = $item['item']['width'];
      $item['slide']['height'] = $item['item']['height'];
      $item['slide']['alt'] = $item['item']['alt'];
      $item['slide']['title'] = $item['item']['title'];

      // Render the slide item
      // If not style set, we have to call theme_image since theme_image_style
      // doesn't auto-fallback to full size image
      if (!empty($item['slide']['style_name'])) {
        // Generate the HTML for the slide
        $item['slide'] = theme('image_style', $item['slide']);
      }
      else {
        // Generate the HTML for the slide
        $item['slide'] = theme('image', $item['slide']);
      }

      // Check caption settings
      if ($display['settings']['caption']) {
        $item['caption'] = filter_xss($item['item']['title']);
      }

      $items[$key] = $item;
    }

    $element = array(
      '#theme' => 'flexslider',
      '#items' => $items,
      '#settings' => $display['settings'],
    );
  }

  return $element;
}